{"remainingRequest":"/Users/sabahathussain/Desktop/HoMakes/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/sabahathussain/Desktop/HoMakes/node_modules/firebase/database/api/Reference.js","dependencies":[{"path":"/Users/sabahathussain/Desktop/HoMakes/node_modules/firebase/database/api/Reference.js","mtime":1501189652000},{"path":"/Users/sabahathussain/Desktop/HoMakes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sabahathussain/Desktop/HoMakes/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/*! @license Firebase v4.2.0\nBuild: rev-d6b2db4\nTerms: https://firebase.google.com/terms/ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Reference = undefined;\nvar _onDisconnect = require('./onDisconnect');\nvar _TransactionResult = require('./TransactionResult');\nvar _util = require('../core/util/util');\nvar _NextPushId = require('../core/util/NextPushId');\nvar _Query = require('./Query');\nvar _Repo = require('../core/Repo');\nvar _Path = require('../core/util/Path');\nvar _QueryParams = require('../core/view/QueryParams');\nvar _validation = require('../core/util/validation');\nvar _validation2 = require('../../utils/validation');\nvar _promise = require('../../utils/promise');\nvar _SyncPoint = require('../core/SyncPoint');\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar Reference = function (_super) {\n    __extends(Reference, _super);\n    /**\n     * Call options:\n     *   new Reference(Repo, Path) or\n     *   new Reference(url: string, string|RepoManager)\n     *\n     * Externally - this is the firebase.database.Reference type.\n     *\n     * @param {!Repo} repo\n     * @param {(!Path)} path\n     * @extends {Query}\n     */\n    function Reference(repo, path) {\n        var _this = this;\n        if (!(repo instanceof _Repo.Repo)) {\n            throw new Error('new Reference() no longer supported - use app.database().');\n        }\n        // call Query's constructor, passing in the repo and path.\n        _this = _super.call(this, repo, path, _QueryParams.QueryParams.DEFAULT, false) || this;\n        return _this;\n    }\n    /** @return {?string} */\n    Reference.prototype.getKey = function () {\n        (0, _validation2.validateArgCount)('Reference.key', 0, 0, arguments.length);\n        if (this.path.isEmpty())\n            return null;\n        else\n            return this.path.getBack();\n    };\n    /**\n     * @param {!(string|Path)} pathString\n     * @return {!Reference}\n     */\n    Reference.prototype.child = function (pathString) {\n        (0, _validation2.validateArgCount)('Reference.child', 1, 1, arguments.length);\n        if (typeof pathString === 'number') {\n            pathString = String(pathString);\n        }\n        else if (!(pathString instanceof _Path.Path)) {\n            if (this.path.getFront() === null)\n                (0, _validation.validateRootPathString)('Reference.child', 1, pathString, false);\n            else\n                (0, _validation.validatePathString)('Reference.child', 1, pathString, false);\n        }\n        return new Reference(this.repo, this.path.child(pathString));\n    };\n    /** @return {?Reference} */\n    Reference.prototype.getParent = function () {\n        (0, _validation2.validateArgCount)('Reference.parent', 0, 0, arguments.length);\n        var parentPath = this.path.parent();\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\n    };\n    /** @return {!Reference} */\n    Reference.prototype.getRoot = function () {\n        (0, _validation2.validateArgCount)('Reference.root', 0, 0, arguments.length);\n        var ref = this;\n        while (ref.getParent() !== null) {\n            ref = ref.getParent();\n        }\n        return ref;\n    };\n    /** @return {!Database} */\n    Reference.prototype.databaseProp = function () {\n        return this.repo.database;\n    };\n    /**\n     * @param {*} newVal\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.set = function (newVal, onComplete) {\n        (0, _validation2.validateArgCount)('Reference.set', 1, 2, arguments.length);\n        (0, _validation.validateWritablePath)('Reference.set', this.path);\n        (0, _validation.validateFirebaseDataArg)('Reference.set', 1, newVal, this.path, false);\n        (0, _validation2.validateCallback)('Reference.set', 2, onComplete, true);\n        var deferred = new _promise.Deferred();\n        this.repo.setWithPriority(this.path, newVal, \n        /*priority=*/ null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {!Object} objectToMerge\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.update = function (objectToMerge, onComplete) {\n        (0, _validation2.validateArgCount)('Reference.update', 1, 2, arguments.length);\n        (0, _validation.validateWritablePath)('Reference.update', this.path);\n        if (Array.isArray(objectToMerge)) {\n            var newObjectToMerge = {};\n            for (var i = 0; i < objectToMerge.length; ++i) {\n                newObjectToMerge['' + i] = objectToMerge[i];\n            }\n            objectToMerge = newObjectToMerge;\n            (0, _util.warn)('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n        }\n        (0, _validation.validateFirebaseMergeDataArg)('Reference.update', 1, objectToMerge, this.path, false);\n        (0, _validation2.validateCallback)('Reference.update', 2, onComplete, true);\n        var deferred = new _promise.Deferred();\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*} newVal\n     * @param {string|number|null} newPriority\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n        (0, _validation2.validateArgCount)('Reference.setWithPriority', 2, 3, arguments.length);\n        (0, _validation.validateWritablePath)('Reference.setWithPriority', this.path);\n        (0, _validation.validateFirebaseDataArg)('Reference.setWithPriority', 1, newVal, this.path, false);\n        (0, _validation.validatePriority)('Reference.setWithPriority', 2, newPriority, false);\n        (0, _validation2.validateCallback)('Reference.setWithPriority', 3, onComplete, true);\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\n            throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n        var deferred = new _promise.Deferred();\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.remove = function (onComplete) {\n        (0, _validation2.validateArgCount)('Reference.remove', 0, 1, arguments.length);\n        (0, _validation.validateWritablePath)('Reference.remove', this.path);\n        (0, _validation2.validateCallback)('Reference.remove', 1, onComplete, true);\n        return this.set(null, onComplete);\n    };\n    /**\n     * @param {function(*):*} transactionUpdate\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n     * @param {boolean=} applyLocally\n     * @return {!Promise}\n     */\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n        (0, _validation2.validateArgCount)('Reference.transaction', 1, 3, arguments.length);\n        (0, _validation.validateWritablePath)('Reference.transaction', this.path);\n        (0, _validation2.validateCallback)('Reference.transaction', 1, transactionUpdate, false);\n        (0, _validation2.validateCallback)('Reference.transaction', 2, onComplete, true);\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n        // to expose it.\n        (0, _validation.validateBoolean)('Reference.transaction', 3, applyLocally, true);\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\n            throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n        if (applyLocally === undefined)\n            applyLocally = true;\n        var deferred = new _promise.Deferred();\n        if (typeof onComplete === 'function') {\n            (0, _promise.attachDummyErrorHandler)(deferred.promise);\n        }\n        var promiseComplete = function promiseComplete(error, committed, snapshot) {\n            if (error) {\n                deferred.reject(error);\n            }\n            else {\n                deferred.resolve(new _TransactionResult.TransactionResult(committed, snapshot));\n            }\n            if (typeof onComplete === 'function') {\n                onComplete(error, committed, snapshot);\n            }\n        };\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n        return deferred.promise;\n    };\n    /**\n     * @param {string|number|null} priority\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.setPriority = function (priority, onComplete) {\n        (0, _validation2.validateArgCount)('Reference.setPriority', 1, 2, arguments.length);\n        (0, _validation.validateWritablePath)('Reference.setPriority', this.path);\n        (0, _validation.validatePriority)('Reference.setPriority', 1, priority, false);\n        (0, _validation2.validateCallback)('Reference.setPriority', 2, onComplete, true);\n        var deferred = new _promise.Deferred();\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*=} value\n     * @param {function(?Error)=} onComplete\n     * @return {!Reference}\n     */\n    Reference.prototype.push = function (value, onComplete) {\n        (0, _validation2.validateArgCount)('Reference.push', 0, 2, arguments.length);\n        (0, _validation.validateWritablePath)('Reference.push', this.path);\n        (0, _validation.validateFirebaseDataArg)('Reference.push', 1, value, this.path, true);\n        (0, _validation2.validateCallback)('Reference.push', 2, onComplete, true);\n        var now = this.repo.serverTime();\n        var name = (0, _NextPushId.nextPushId)(now);\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n        // We use child() to create handles to two different references. The first is turned into a\n        // ThennableReference below by adding then() and catch() methods and is used as the\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\n        // value of the first ThennableReference.\n        var thennablePushRef = this.child(name);\n        var pushRef = this.child(name);\n        var promise;\n        if (value != null) {\n            promise = thennablePushRef.set(value, onComplete).then(function () {\n                return pushRef;\n            });\n        }\n        else {\n            promise = _promise.PromiseImpl.resolve(pushRef);\n        }\n        thennablePushRef.then = promise.then.bind(promise);\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\n        if (typeof onComplete === 'function') {\n            (0, _promise.attachDummyErrorHandler)(promise);\n        }\n        return thennablePushRef;\n    };\n    /**\n     * @return {!OnDisconnect}\n     */\n    Reference.prototype.onDisconnect = function () {\n        (0, _validation.validateWritablePath)('Reference.onDisconnect', this.path);\n        return new _onDisconnect.OnDisconnect(this.repo, this.path);\n    };\n    Object.defineProperty(Reference.prototype, \"database\", {\n        get: function get() {\n            return this.databaseProp();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"key\", {\n        get: function get() {\n            return this.getKey();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"parent\", {\n        get: function get() {\n            return this.getParent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"root\", {\n        get: function get() {\n            return this.getRoot();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Reference;\n}(_Query.Query);\nexports.Reference = Reference;\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\n_Query.Query.__referenceConstructor = Reference;\n_SyncPoint.SyncPoint.__referenceConstructor = Reference;\n",null]}