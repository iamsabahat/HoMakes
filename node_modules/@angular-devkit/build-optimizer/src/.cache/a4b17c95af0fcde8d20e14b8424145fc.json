{"remainingRequest":"/Users/sabahathussain/Desktop/HoMakes/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/sabahathussain/Desktop/HoMakes/node_modules/angularfire2/database/firebase_list_observable.js","dependencies":[{"path":"/Users/sabahathussain/Desktop/HoMakes/node_modules/angularfire2/database/firebase_list_observable.js","mtime":1496439430000},{"path":"/Users/sabahathussain/Desktop/HoMakes/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sabahathussain/Desktop/HoMakes/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { Observable } from 'rxjs/Observable';\nimport 'firebase/database';\nimport * as utils from '../utils';\nvar FirebaseListObservable = /*@__PURE__*/ (function (_super) {\n    __extends(FirebaseListObservable, _super);\n    function FirebaseListObservable($ref, subscribe) {\n        var _this = _super.call(this, subscribe) || this;\n        _this.$ref = $ref;\n        return _this;\n    }\n    FirebaseListObservable.prototype.lift = function (operator) {\n        var observable = new FirebaseListObservable(this.$ref);\n        observable.source = this;\n        observable.operator = operator;\n        observable.$ref = this.$ref;\n        return observable;\n    };\n    FirebaseListObservable.prototype.push = function (val) {\n        if (!this.$ref) {\n            throw new Error('No ref specified for this Observable!');\n        }\n        return this.$ref.ref.push(val);\n    };\n    FirebaseListObservable.prototype.update = function (item, value) {\n        var _this = this;\n        return this._checkOperationCases(item, {\n            stringCase: function () { return _this.$ref.ref.child(item).update(value); },\n            firebaseCase: function () { return item.update(value); },\n            snapshotCase: function () { return item.ref.update(value); },\n            unwrappedSnapshotCase: function () { return _this.$ref.ref.child(item.$key).update(value); }\n        });\n    };\n    FirebaseListObservable.prototype.remove = function (item) {\n        var _this = this;\n        if (!item) {\n            return this.$ref.ref.remove();\n        }\n        return this._checkOperationCases(item, {\n            stringCase: function () { return _this.$ref.ref.child(item).remove(); },\n            firebaseCase: function () { return item.remove(); },\n            snapshotCase: function () { return item.ref.remove(); },\n            unwrappedSnapshotCase: function () { return _this.$ref.ref.child(item.$key).remove(); }\n        });\n    };\n    FirebaseListObservable.prototype._checkOperationCases = function (item, cases) {\n        if (utils.isString(item)) {\n            return cases.stringCase();\n        }\n        else if (utils.isFirebaseRef(item)) {\n            return cases.firebaseCase();\n        }\n        else if (utils.isFirebaseDataSnapshot(item)) {\n            return cases.snapshotCase();\n        }\n        else if (utils.isAFUnwrappedSnapshot(item)) {\n            return cases.unwrappedSnapshotCase();\n        }\n        throw new Error(\"Method requires a key, snapshot, reference, or unwrapped snapshot. Got: \" + typeof item);\n    };\n    return FirebaseListObservable;\n}(Observable));\nexport { FirebaseListObservable };\n//# sourceMappingURL=firebase_list_observable.js.map \n",null]}